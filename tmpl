#!/bin/bash
if [ -f ~/.tmplrc ]; then
  . ~/.tmplrc
fi

projectTemplateDir="${PROJECT_TEMPLATE_DIR}"

printUsage() {
  echo "tmpl - The super lightweigt project template utility"
  echo ""
  echo "Usage"
  echo "  ls | list:                   List Project Templates"
  echo "  init <template> <dest>:      Initialize a template into a new directory"
}

init () {
  src="$1"
  dest="$2"

  if [ "$src" = "" ] || [ "$dest" = "" ]; then
    echo "Missing source or destination"
    echo ""
    printUsage
    exit 1
  fi

  if [ ! -d "${projectTemplateDir}/${src}" ]; then
    echo "Project template \"${projectTemplateDir}/${src}\" does not exist"
    exit 2
  fi
  cp -r "${projectTemplateDir}/${src}" "$dest"
  rm -rf "$dest/.git"
  (cd "$dest" && git init)

  # Check for tmpl-init and prompt before execution
  if [ -f "$dest/tmpl-init" ]; then
    echo "Template includes an initialization script: '$dest/tmpl-init'"
    read -p "Do you want to execute it? (y/N): " confirm
    case "$confirm" in
      [yY]|[yY][eE][sS])
        echo "Executing tmpl-init..."
        (cd "$dest" && TMPL_NAME="$(basename "$dest")" . tmpl-init)
        ;;
      *)
        echo "Skipping tmpl-init execution."
        ;;
    esac
  fi
}

if [ "$projectTemplateDir" = "" ]; then
  echo "You need to set the project template directory (\$PROJECT_TEMPLATE_DIR). You can either do this by setting PROJECT_TEMPLATE_DIR or creating a .tmplrc file in your home dir"
  exit 128
fi

arg=$1

if [ "$arg" = "" ]; then
  printUsage
  exit 0
fi

case "$arg" in
  ls|list)
    ls "$projectTemplateDir"
  ;;
  init)
    init "$2" "$3"
  ;;
  *)
    printUsage
  ;;
esac
